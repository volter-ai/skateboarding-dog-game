name: VGit Deploy Preview
on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: "Branch to deploy"
        required: true
        type: string
      deployment_type:
        description: "Type of deployment"
        required: false
        type: choice
        default: "preview"
        options:
          - "preview"
          - "production"
      username:
        description: "GitHub username"
        required: true
        type: string
      project_name:
        description: "Project name"
        required: true
        type: string
      force_rebuild:
        description: "Force rebuild even if no changes"
        required: false
        type: boolean
        default: false

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Validate inputs
        run: |
          if [ -z "${{ github.event.inputs.branch_name }}" ]; then
            echo "❌ Branch name is required"
            exit 1
          fi
          echo "✅ Inputs validated"
          echo "Branch: ${{ github.event.inputs.branch_name }}"
          echo "Type: ${{ github.event.inputs.deployment_type }}"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch_name }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify branch exists
        run: |
          echo "🔍 Verifying branch exists..."
          CURRENT_BRANCH=$(git branch --show-current)
          if [ "$CURRENT_BRANCH" != "${{ github.event.inputs.branch_name }}" ]; then
            echo "❌ Failed to checkout branch '${{ github.event.inputs.branch_name }}'"
            echo "Current branch: $CURRENT_BRANCH"
            exit 1
          fi
          echo "✅ Successfully checked out branch: ${{ github.event.inputs.branch_name }}"

      - name: Detect project type and build configuration
        run: |
          echo "🔍 Detecting project type..."

          if [ -f "package.json" ]; then
            echo "📦 Node.js project detected"
            echo "PROJECT_TYPE=nodejs" >> $GITHUB_ENV
            
            # Check for build script
            if grep -q '"build"' package.json; then
              BUILD_SCRIPT=$(jq -r '.scripts.build' package.json)
              echo "BUILD_SCRIPT=$BUILD_SCRIPT" >> $GITHUB_ENV
              echo "HAS_BUILD_SCRIPT=true" >> $GITHUB_ENV
              echo "✅ Build script found: $BUILD_SCRIPT"
            else
              echo "⚠️ No build script found in package.json"
              echo "HAS_BUILD_SCRIPT=false" >> $GITHUB_ENV
            fi
            
            # Check for dev script
            if grep -q '"dev"' package.json; then
              DEV_SCRIPT=$(jq -r '.scripts.dev' package.json)
              echo "DEV_SCRIPT=$DEV_SCRIPT" >> $GITHUB_ENV
              echo "HAS_DEV_SCRIPT=true" >> $GITHUB_ENV
              echo "✅ Dev script found: $DEV_SCRIPT"
            fi
            
            # Detect framework
            if jq -e '.dependencies.react' package.json > /dev/null 2>&1; then
              echo "FRAMEWORK=react" >> $GITHUB_ENV
              echo "⚛️ React project detected"
            elif jq -e '.dependencies.vue' package.json > /dev/null 2>&1; then
              echo "FRAMEWORK=vue" >> $GITHUB_ENV
              echo "🟢 Vue project detected"
            elif jq -e '.dependencies.next' package.json > /dev/null 2>&1; then
              echo "FRAMEWORK=nextjs" >> $GITHUB_ENV
              echo "🔼 Next.js project detected"
            elif jq -e '.dependencies.angular' package.json > /dev/null 2>&1; then
              echo "FRAMEWORK=angular" >> $GITHUB_ENV
              echo "🅰️ Angular project detected"
            else
              echo "FRAMEWORK=vanilla" >> $GITHUB_ENV
              echo "🌐 Vanilla JavaScript project detected"
            fi
            
          elif [ -f "index.html" ]; then
            echo "🌐 Static HTML project detected"
            echo "PROJECT_TYPE=static" >> $GITHUB_ENV
            echo "HAS_BUILD_SCRIPT=false" >> $GITHUB_ENV
            
          else
            echo "❓ Unknown project type"
            echo "PROJECT_TYPE=unknown" >> $GITHUB_ENV
            echo "HAS_BUILD_SCRIPT=false" >> $GITHUB_ENV
          fi

      - name: Setup Node.js (if needed)
        if: env.PROJECT_TYPE == 'nodejs'
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        if: env.PROJECT_TYPE == 'nodejs'
        run: |
          echo "📦 Installing dependencies..."
          npm install

      - name: Run pre-build checks
        if: env.PROJECT_TYPE == 'nodejs'
        run: |
          echo "🔧 Running pre-build checks..."

          # Run linting if available
          if npm run lint --silent > /dev/null 2>&1; then
            echo "🔍 Running linter..."
            npm run lint || {
              echo "⚠️ Linting issues found (continuing with deployment)"
              echo "LINT_ISSUES=true" >> $GITHUB_ENV
            }
          fi

          # Run type checking if available
          if npm run type-check --silent > /dev/null 2>&1 || npm run tsc --silent > /dev/null 2>&1; then
            echo "📝 Running type checks..."
            (npm run type-check || npm run tsc) || {
              echo "⚠️ Type checking issues found (continuing with deployment)"
              echo "TYPE_ISSUES=true" >> $GITHUB_ENV
            }
          fi

      - name: Build project
        if: env.HAS_BUILD_SCRIPT == 'true'
        run: |
          echo "🏗️ Building project..."
          npm run build || {
            echo "❌ Build failed"
            exit 1
          }
          echo "✅ Build completed successfully"
          echo "BUILD_SUCCESS=true" >> $GITHUB_ENV

      - name: Detect build output directory
        run: |
          echo "📁 Detecting build output directory..."
          BUILD_DIR="dist"  # Default value

          # Check for custom build directory from secret first
          if [ -n "${{ secrets.CUSTOM_BUILD_DIR }}" ]; then
            CUSTOM_DIR="${{ secrets.CUSTOM_BUILD_DIR }}"
            if [ -d "$CUSTOM_DIR" ] && [ "$(ls -A $CUSTOM_DIR 2>/dev/null)" ]; then
              BUILD_DIR="$CUSTOM_DIR"
              echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
              echo "✅ Using custom build directory: $BUILD_DIR"
              ls -la "$BUILD_DIR"
              exit 0
            else
              echo "⚠️ Custom build directory '$CUSTOM_DIR' not found or empty, falling back to auto-detection"
            fi
          fi

          # Auto-detect common build output directories
          BUILD_DIRS=("dist" "build" "_site" "out" ".next" "public")

          for dir in "${BUILD_DIRS[@]}"; do
            if [ -d "$dir" ] && [ "$(ls -A $dir 2>/dev/null)" ]; then
              BUILD_DIR="$dir"
              echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
              echo "✅ Build output directory found: $BUILD_DIR"
              break
            fi
          done

          # If no build directory found, use current directory for static sites
          if [ -z "$BUILD_DIR" ]; then
            if [ -f "index.html" ]; then
              BUILD_DIR="."
              echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
              echo "✅ Using current directory for static site"
            else
              echo "❌ No build output directory found"
              echo "Available directories:"
              ls -la
              exit 1
            fi
          fi

          # List contents of chosen build directory
          echo "📄 Build directory contents:"
          ls -la "$BUILD_DIR"

      - name: Install Netlify CLI
        run: |
          echo "🌐 Installing Netlify CLI..."
          npm install -g netlify-cli
          netlify --version

      - name: Deploy to Netlify
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: |
          if [ -z "$NETLIFY_AUTH_TOKEN" ]; then
            echo "❌ NETLIFY_AUTH_TOKEN secret is not configured"
            echo "Please add your Netlify auth token to repository secrets"
            exit 1
          fi

          if [ -z "$NETLIFY_SITE_ID" ]; then
            echo "❌ NETLIFY_SITE_ID secret is not configured"
            echo "Please add your Netlify site ID to repository secrets"
            exit 1
          fi

          echo "🚀 Deploying to Netlify..."

          # Determine deployment type
          if [ "${{ github.event.inputs.deployment_type }}" = "production" ]; then
            echo "🌟 Deploying to production..."
            DEPLOY_OUTPUT=$(netlify deploy --dir="${BUILD_DIR}" --prod --json) || {
              echo "❌ Production deployment failed"
              exit 1
            }
          else
            echo "🔍 Deploying preview with branch alias..."
            DEPLOY_OUTPUT=$(netlify deploy --dir="${BUILD_DIR}" --alias="${{ github.event.inputs.branch_name }}" --json) || {
              echo "❌ Preview deployment failed"
              exit 1
            }
          fi

          echo "✅ Deployment completed successfully"

          # Parse deployment output
          DEPLOY_URL=$(echo "$DEPLOY_OUTPUT" | jq -r '.deploy_url // .url // empty')
          DEPLOY_ID=$(echo "$DEPLOY_OUTPUT" | jq -r '.deploy_id // empty')

          if [ -n "$DEPLOY_URL" ]; then
            echo "DEPLOY_URL=$DEPLOY_URL" >> $GITHUB_ENV
            echo "🌐 Deployment URL: $DEPLOY_URL"
          fi

          if [ -n "$DEPLOY_ID" ]; then
            echo "DEPLOY_ID=$DEPLOY_ID" >> $GITHUB_ENV
            echo "🆔 Deploy ID: $DEPLOY_ID"
          fi

      - name: Run smoke tests (if applicable)
        if: env.DEPLOY_URL != ''
        run: |
          echo "🧪 Running smoke tests on deployed site..."

          # Wait a moment for deployment to be ready
          sleep 5

          # Basic connectivity test
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.DEPLOY_URL }}" || echo "000")

          if [ "$HTTP_STATUS" = "200" ]; then
            echo "✅ Site is accessible (HTTP $HTTP_STATUS)"
            echo "SMOKE_TEST_PASSED=true" >> $GITHUB_ENV
          else
            echo "⚠️ Site returned HTTP $HTTP_STATUS"
            echo "SMOKE_TEST_PASSED=false" >> $GITHUB_ENV
          fi

          # Check for basic HTML structure
          if curl -s "${{ env.DEPLOY_URL }}" | grep -q "<html"; then
            echo "✅ Valid HTML structure detected"
          else
            echo "⚠️ No HTML structure found"
          fi

      - name: Generate screenshot (if applicable)
        if: env.DEPLOY_URL != '' && env.SMOKE_TEST_PASSED == 'true'
        run: |
          echo "📸 Generating screenshot of deployed site..."

          # Install Playwright and Chromium (with required system deps)
          npx -y playwright@latest install --with-deps chromium

          # Generate screenshot
          npx -y playwright@latest screenshot "${{ env.DEPLOY_URL }}" screenshot.png || {
            echo "⚠️ Failed to generate screenshot"
            exit 0
          }

          if [ -f "screenshot.png" ]; then
            echo "✅ Screenshot generated successfully"
            echo "SCREENSHOT_GENERATED=true" >> $GITHUB_ENV
          fi

      - name: Create deployment payload
        run: |
          echo "📦 Creating deployment payload..."

          # Create payload for VGit
          cat > deployment_payload.json << EOF
          {
            "branch_name": "${{ github.event.inputs.branch_name }}",
            "deployment_type": "${{ github.event.inputs.deployment_type }}",
            "repository_full_name": "${{ github.repository }}",
            "username": "${{ github.event.inputs.username }}",
            "project_name": "${{ github.event.inputs.project_name }}",
            "project_type": "${{ env.PROJECT_TYPE }}",
            "framework": "${{ env.FRAMEWORK }}",
            "build_success": "${{ env.BUILD_SUCCESS == 'true' }}",
            "deploy_url": "${{ env.DEPLOY_URL }}",
            "deploy_id": "${{ env.DEPLOY_ID }}",
            "smoke_test_passed": "${{ env.SMOKE_TEST_PASSED == 'true' }}",
            "screenshot_generated": "${{ env.SCREENSHOT_GENERATED == 'true' }}",
            "lint_issues": "${{ env.LINT_ISSUES == 'true' }}",
            "type_issues": "${{ env.TYPE_ISSUES == 'true' }}",
            "workflow_run_id": "${{ github.run_id }}",
            "commit_sha": "${{ github.sha }}",
            "created_at": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          }
          EOF

          echo "✅ Deployment payload created"

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-results
          path: |
            deployment_payload.json
            screenshot.png
          retention-days: 30

      - name: Summary
        run: |
          echo "🎉 Deployment completed!"
          echo ""
          echo "📋 Summary:"
          echo "- Branch: ${{ github.event.inputs.branch_name }}"
          echo "- Type: ${{ github.event.inputs.deployment_type }}"
          echo "- Repository: ${{ github.repository }}"
          echo "- Project Type: ${{ env.PROJECT_TYPE }}"
          if [ -n "${{ env.FRAMEWORK }}" ]; then
            echo "- Framework: ${{ env.FRAMEWORK }}"
          fi
          echo "- Build Success: ${{ env.BUILD_SUCCESS == 'true' }}"
          if [ -n "${{ env.DEPLOY_URL }}" ]; then
            echo "- Deployment URL: ${{ env.DEPLOY_URL }}"
          fi
          echo "- Smoke Tests: ${{ env.SMOKE_TEST_PASSED == 'true' }}"
          echo "- Screenshot: ${{ env.SCREENSHOT_GENERATED == 'true' }}"
          echo "- Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          if [ "${{ env.LINT_ISSUES }}" = "true" ]; then
            echo ""
            echo "⚠️ Linting issues detected (see build logs)"
          fi

          if [ "${{ env.TYPE_ISSUES }}" = "true" ]; then
            echo ""
            echo "⚠️ Type checking issues detected (see build logs)"
          fi

          echo ""
          echo "🔗 Access your deployed site: ${{ env.DEPLOY_URL }}"
